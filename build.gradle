//import org.ethereum.solidity.compiler.*;//.SolidityCompiler;
import org.ethereum.solidity.compiler.CompilationResult;
import org.ethereum.solidity.compiler.SolidityCompiler;
import org.ethereum.solidity.compiler.SolidityCompiler.Result;
import org.ethereum.solidity.compiler.CompilationResult.ContractMetadata;

import static org.ethereum.solidity.compiler.SolidityCompiler.Options.*;
import java.nio.file.Files;
import java.nio.file.Paths;


apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'groovy'




buildscript {
    repositories {
        mavenCentral()
        maven {url "http://dl.bintray.com/ethereum/maven"}

    }
    dependencies {
        classpath('org.web3j:core:1.1.2')
        classpath("org.ethereum:ethereumj-core:1.3.+")    


        //classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
    }
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.

mainClassName = 'web3j_test.NewClass'

repositories {
    mavenCentral()
    maven {
        url "http://jade.tilab.com/maven/"
    }
    maven {url "http://dl.bintray.com/ethereum/maven"}

}

dependencies {
    
        //java-interface to a running go-client
	compile('org.web3j:core:1.1.2')
        //the jade multi-agent-framework
        compile('com.tilab.jade:jade:4.4.0')    
        compile ("org.ethereum:ethereumj-core:1.3.+")    
        compile("net.sf.jason:jason:2.0+")
        //compile("com.javarepl:javarepl:425")
        //compile("org.apache-extras.beanshell:bsh:2.0b6")
        //compile gradleApi()

}

/*
task myTaskCallJava << {
   MyClass.foo()
   org.web3j.codegen.SolidityFunctionWrapperGenerator("build/contract.bin", "build/contract.abi", 
   
    /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name
}
*/

task generateCode(type: GenerateCode)
class GenerateCode extends DefaultTask {
    
    @TaskAction
    def action() {
    String c = new File('src/main/resources/MyContract.sol').text;
    
    //System.out.println("code" + c);
    //use ethereumj's solidity compiler
    org.ethereum.solidity.compiler.SolidityCompiler.Result res = org.ethereum.solidity.compiler.SolidityCompiler.compile(c.getBytes(), true, ABI, BIN, INTERFACE);
    //System.out.println(">>res: " + res.output);
    CompilationResult result = CompilationResult.parse(res.output);
    //System.out.println(">>result: " + result);
    //extract specific contract since one source file can contain more than one constract
    ContractMetadata contract = result.contracts.get("MyContract");
    //System.out.println(">>abi: " + contract.abi);
    //System.out.prin    
        
    //from compiled .sol get abi (binary interface) and bin (machine code of the contract) and write them to files
    Files.write(Paths.get(System.getProperty("user.dir")).resolve("src/main/resources/MyContract.abi"), contract.abi.getBytes());
    Files.write(Paths.get(System.getProperty("user.dir")).resolve("src/main/resources/MyContract.bin"), contract.bin.getBytes());

    //use web3j's wrapper generator to create the sourcecode of a java class
    //representing the solidity contract
    String userdir = System.getProperty("user.dir");
    String[] args = ["generate", userdir+"/build/resources/main/MyContract.bin", userdir+"/build/resources/main/MyContract.abi","-p","web3j_test","-o",userdir+"/src/main/java"];
    org.web3j.codegen.SolidityFunctionWrapperGenerator.run(args);

        
    //String c = String.join("", java.nio.file.Files.readAllLines(Paths.get("src/main/resources/contract.sol")));
    System.out.println(c);
    }
}